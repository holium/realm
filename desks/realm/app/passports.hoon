::  people [realm]:
::
::  People management within Realm
::
::    ## Scry paths
::
::    /x/spaces/[ship]/[space]/people.hoon
::      All people in a given realm space
::
::    ## Subscription paths
::
::    /people:
::      A stream of the current updates to the state, sending the initial state
::      upon subscribe.
::
::    ##  Pokes
::
::    %people-action:
::      add, edit, replace, and remove people
::
::    ##  Watches
::      listens for %spaces /updates. handles %spaces synch'ing thru
::      %initial reaction.  handles other reactions generated by %spaces
::       agent when adding spaces are changing people permissions
::
::
::
/-  store=passports, contact-store, spaces, visas, membership-store=membership, hark=hark-store, resource
/+  dbug, default-agent, resource, lib=passports, visa-lib=visas
^-  agent:gall
::
=>
  |%
  +$  card  card:agent:gall
  +$  versioned-state
      $%  state-0
      ==
  +$  state-0
    $:  %0
        =contacts:store
        membership=districts:store
        invitations=invitations:visas
        allowed-groups=(set resource)
        allowed-ships=(set ship)
        is-public=_|
    ==
  --
=|  state-0
=*  state  -
:: ^-  agent:gall
=<
  %-  agent:dbug
  |_  =bowl:gall
  +*  this  .
      def   ~(. (default-agent this %.n) bowl)
      core   ~(. +> [bowl ~])
  :: :: ::
  ++  on-init  :: on-init:def
    ^-  (quip card _this)
    ::  set initial state
    =/  our-member
      [
        roles=(silt `(list role:membership-store)`~[%owner %admin])
        alias=''
        status=%host
      ]
    =/  our-members  (malt `(list (pair ship passport:store))`~[[our.bowl our-member]])
    =/  initial-mem   `districts:store`(malt `(list (pair space-path:spaces passports:store))`~[[[our.bowl 'our'] our-members]])
    =.  membership.state          initial-mem
    :_  this
    ::  %watch: get the initial contact list and watch for updates
    :~  ::  [%pass /contacts %agent [our.bowl %contact-store] %watch /all]
        :: watch spaces to get notifications when people related areas
        ::   of spaces change (e.g. create, edit, remove)
        [%pass /spaces %agent [our.bowl %spaces] %watch /updates]
    ==
  ::
  ++  on-save  ::on-save:def
    ^-  vase
    !>(state)
  ::
  ++  on-load  ::on-load:def
    |=  old-state=vase
    ^-  (quip card:agent:gall agent:gall)
    =/  old  !<(versioned-state old-state)
    ?-  -.old
      %0  `this(state old)
    ==
  ::
  ++  on-poke
    |=  [=mark =vase]
    ^-  (quip card _this)
    =^  cards  state
    ?+  mark  (on-poke:def mark vase)
      :: %passports-action  (act:core !<(action:store vase))
      %visa-action     (inv-act:core !<(action:visas vase))
    ==
    [cards this]
  ::
  ++  on-leave  on-leave:def
  ::
  ++  on-watch
    |=  =path
    ^-  (quip card _this)
    =/  cards=(list card)
      ?+    path      (on-watch:def path)
        ::
          [%all ~]
        ::  only host should get all updates
        ?>  =(our.bowl src.bowl)
        (members:send-reaction [%all membership.state] [/all ~])
        ::
          [%members @ @ ~]
        ::  space level watch subscription
        =/  host        `@p`(slav %p i.t.path)
        =/  space-pth   `@t`i.t.t.path
        ::  only host should get all updates
        ?>  (check-member:core [host space-pth] src.bowl)     ::  only members should subscribe
        =/  passports       (~(got by membership.state) [host space-pth])
        (members:send-reaction [%members [host space-pth] passports] [/members/(scot %p host)/(scot %tas space-pth) ~])
      ==
    [cards this]
  ::
  ++  on-peek
    |=  =path
    ^-  (unit (unit cage))
    ?+    path  (on-peek:def path)
    ::  ~/scry/passports/visas.json
    [%x %visas ~]
      :: =/  visas   (~(got by invitations.state) [host space-pth])
      :: ?~  passports      ``json+!>(~)
      ``visa-view+!>([%incoming incoming.invitations.state])
    ::
    ::  ~/scry/passports/visas.json
    [%x %visas ~]
      :: =/  visas   (~(got by invitations.state) [host space-pth])
      :: ?~  passports      ``json+!>(~)
      ``invite-view+!>([%invitations invitations.state])
    ::
    ::  ~/scry/passports/~zod/our/members.json
      [%x @ @ %members ~]
        =/  host        `@p`(slav %p i.t.path)
        =/  space-pth   `@t`i.t.t.path
        =/  passports   (~(got by membership.state) [host space-pth])
        :: ?~  passports      ``json+!>(~)
        ``passports-view+!>([%members passports])
    ::
    ::  ~/scry/passports/~zod/our/members/~dev.json
      [%x @ @ %members @ ~]
        =/  host        `@p`(slav %p i.t.path)
        =/  space-pth   `@t`i.t.t.path
        =/  patp        `@p`(slav %p i.t.t.t.t.path)
        =/  passports   (~(get by membership.state) [host space-pth])
        =/  member      (~(get by (need passports)) patp)
        ?~  member      ``passports-view+!>([%member (silt ~[~])])
        ``passports-view+!>([%member (need member)])
    ::
    ::  ~/scry/passports/~zod/our/is-member/~fes.json
      [%x @ @ %is-member @ ~]
        =/  host        `@p`(slav %p i.t.path)
        =/  space-pth   `@t`i.t.t.path
        =/  patp        `@p`(slav %p i.t.t.t.t.path)
        =/  passports   (~(get by membership.state) [host space-pth])
        ?~  passports   ``passports-view+!>([%is-member %.n])
        =/  is-member   (~(has by (need passports)) patp)
        ``passports-view+!>([%is-member is-member])
    ==
  ::
  ++  on-agent
    |=  [=wire =sign:agent:gall]
    ^-  (quip card _this)
    =/  wirepath  `path`wire
    ?+    wire  (on-agent:def wire sign)
      [%spaces ~]
        ?+    -.sign  (on-agent:def wire sign)
          %watch-ack
            ?~  p.sign  `this
            ~&  >>>  "{<dap.bowl>}: spaces subscription failed"
            `this
      
          %kick
            ~&  >  "{<dap.bowl>}: spaces kicked us, resubscribing..."
            :_  this
            :~  [%pass /spaces %agent [our.bowl %spaces] %watch /updates]
            ==
      
          %fact
            ?+    p.cage.sign     (on-agent:def wire sign)
                %spaces-reaction
                  =/  rct  !<(=reaction:spaces q.cage.sign)
                  =^  cards  state
                  ?-  -.rct :: (on-agent:def wire sign)
                    %initial      (on-spaces-initial:core rct)
                    %add          (on-spaces-add:core rct)
                    %replace      (on-spaces-replace:core rct)
                    %remove       (on-spaces-remove:core rct)
                    %new-space    (on-spaces-new:core rct)
                  ==
                  [cards this]
            ==
        ==
      ::
      [%members @ @ ~]  ::  only members will subscribe to this pace
        ?+    -.sign  (on-agent:def wire sign)
          %watch-ack
            ?~  p.sign  `this
            ~&  >>>  "{<dap.bowl>}: passports subscription failed"
            `this
          %kick
            =/  =ship       `@p`(slav %p i.t.wire)
            =/  space-pth   `@t`i.t.t.wire
            ~&  >  "{<dap.bowl>}: passports kicked us, resubscribing... {<ship>} {<space-pth>}"
            =/  watch-path      [/members/(scot %p ship)/(scot %tas space-pth)]
            :_  this
            :~  [%pass watch-path %agent [ship %passports] %watch watch-path]
            ==
          %fact
            ?+    p.cage.sign  (on-agent:def wire sign)
                %visa-reaction
                =^  cards  state
                  (visa-reaction:core !<(=reaction:visas q.cage.sign))
                [cards this]
              ::
                %passports-reaction
                =^  cards  state
                  (passports-reaction:core !<(=reaction:store q.cage.sign))
                [cards this]
            ==
        ==
      ::
      [%passports ~]  ::  only our will subscribe to this path
        ?+    -.sign  (on-agent:def wire sign)
          %watch-ack
            ?~  p.sign  `this
            ~&  >>>  "{<dap.bowl>}: passports subscription failed"
            `this
      ::
          %kick
            ~&  >  "{<dap.bowl>}: passports kicked us, resubscribing..."
            :: ~&  >  [sign]
            :_  this
            :~  [%pass /passports %agent [our.bowl %spaces] %watch /all]
            ==
      ::
          %fact
            ?+    p.cage.sign  (on-agent:def wire sign)
                %visa-reaction
                =^  cards  state
                  (visa-reaction:core !<(=reaction:visas q.cage.sign))
                [cards this]

                %passports-reaction
                =^  cards  state
                  (passports-reaction:core !<(=reaction:store q.cage.sign))
                [cards this]
            ==
        ==
    ==
  ::
  ++  on-arvo  on-arvo:def
  ::
  ++  on-fail   on-fail:def
  --
::
|_  [=bowl:gall cards=(list card)]
::
++  core  .
++  this  .
::
++  make-visas
  |=  [path=space-path:spaces =members:membership-store =space:spaces]
  ^-  (list card)
  ::  loop thru each member, and build a list of invitations/pokes (acc)
  =.  members       (~(del by members) our.bowl)
  %-  ~(rep by members)
    |=  [[=ship =member:membership-store] acc=(list card)]
    =/  role          (snag 0 ~(tap in roles.member))
    =/  new-visa      (new-visa:visa-lib path src.bowl ship role space '' now.bowl)
    %+  snoc  acc
    [%pass / %agent [ship dap.bowl] %poke visa-action+!>([%invited path new-visa])]
::
::
::
++  inv-act
  |=  [act=action:visas]
  ^-  (quip card _state)
  |^
  ?-  -.act
    %send-invite          (handle-send +.act)
    %invited              (handle-invited +.act)
    %accept-invite        (handle-accept +.act)
    %decline-invite       (handle-decline +.act)
    %stamped              (handle-stamped +.act)
    %kick-member          (handle-kicked +.act)
  ==
  ::
  ++  handle-send
    ::  Sends an invite to a ship
    ::  type: member | host
    |=  [path=space-path:spaces =ship =role:membership-store message=@t]
    ^-  (quip card _state)
    ?>  (check-member:core path src.bowl)                         ::  only members should invite
    ::  pre
    =/  space-scry                .^(view:spaces %gx /(scot %p our.bowl)/spaces/(scot %da now.bowl)/(scot %p ship.path)/(scot %tas space.path)/noun)
    ?>  ?=(%space -.space-scry)
    =/  new-visa                (new-visa:visa-lib path src.bowl ship role space.space-scry message now.bowl)
    ?.  (is-host:core ship.path)                                  ::  Check if we should relay to host
      (on-member path ship new-visa)                              ::  We are the member  
    (on-host path ship role new-visa)                             ::  We are the host
    ::  
    ++  on-member 
      |=  [path=space-path:spaces =ship new-visa=invite:visas]
      =.  outgoing.invitations.state  (set-outgoing path ship new-visa)     ::  We are not the host, but still set our outgoing
      :_  state
      :~  [%pass / %agent [ship.path dap.bowl] %poke visa-action+!>(act)]   ::  Send invite request to host
      ==
    ++  on-host
      |=  [path=space-path:spaces =ship =role:membership-store new-visa=invite:visas]
      ?>  =(our.bowl src.bowl)        ::  Dont invite yourself
      =/  passports                   (~(gut by membership.state) path `passports:store`[~])
      =/  new-member
        [
          roles=(silt `(list role:membership-store)`~[role])
          alias=''
          status=%invited
        ]
      =.  passports                   (~(put by passports) [ship new-member])
      =.  membership.state            (~(put by membership.state) [path passports])
      =.  outgoing.invitations.state  (set-outgoing:core path ship new-visa)
      =/  watch-paths                 [/all /members/(scot %p ship.path)/(scot %tas space.path) ~]
      :_  state
      :~  [%pass / %agent [ship dap.bowl] %poke visa-action+!>([%invited path new-visa])]             ::  Send invite request to invited
          [%give %fact watch-paths visa-reaction+!>([%invite-sent path ship new-visa new-member])]    ::  Notify watchers
      ==
  ::
  ::  handles the case when an invite is received
  ++  handle-invited
    ::  when an invite is received
    ::  type: member
    |=  [path=space-path:spaces =invite:visas]
    ^-  (quip card _state)
    =.  incoming.invitations.state    (~(put by incoming.invitations.state) [path invite])
    =/  notify=action:hark            (notify path /invite (crip " issued you a invite to join {<`@t`(scot %tas name.invite)>} in Realm."))
    :_  state
    :~  [%pass / %agent [our.bowl %hark-store] %poke hark-action+!>(notify)]                      ::  send notification to ship
        [%give %fact [/all ~] visa-reaction+!>([%invite-received path invite])]                    
    ==
  ::
  ++  handle-accept     ::  MEMBER | HOST
    |=  [path=space-path:spaces]
    ^-  (quip card _state)
    ?.  (is-host:core ship.path)
      ~&  >>  "handle-accept: we are invited {<[our.bowl ship.path]>}"
      ::
      ::  MEMBER
      ::  If we are invited we will send the invite action to the host
      :_  state
      :~  [%pass / %agent [ship.path %passports] %poke visa-action+!>(act)]
      ==
    ~&  >>  "handle-accept: we are the host {<[our.bowl ship.path]>}"
    ::
    ::  HOST
    ::
    =/  accepter                    src.bowl
    =/  passes                      (~(gut by membership.state) path `passports:store`[~])
    =/  upd-mem                     (~(got by passes) accepter)
    =.  status.upd-mem              %joined
    =.  passes                      (~(put by passes) [accepter upd-mem])
    =.  membership.state            (~(put by membership.state) [path passes])
    ~&  >  ['handle-accept (got invitations)' invitations.state]
    =/  space-invites               (~(get by outgoing.invitations.state) path)
    =/  watch-paths                 [/all /members/(scot %p ship.path)/(scot %tas space.path) ~]
    =/  reactions                   
      :~  [%pass / %agent [accepter %passports] %poke visa-action+!>([%stamped path])]              ::  Send space to invitee
          [%give %fact watch-paths visa-reaction+!>([%invite-accepted path accepter upd-mem])]      ::  Notify watchers
      ==
    ?@  space-invites
      ::  if there is an outgoing
      =.  space-invites               (~(del by space-invites) accepter)
      =.  outgoing.invitations.state  (~(put by outgoing.invitations.state) [path space-invites])
      :_  state
      reactions
    ::  else we will still send reactions
    :_  state
    reactions
  ::
  ++  handle-decline     ::  MEMBER | HOST
    |=  [path=space-path:spaces]
    ^-  (quip card _state)
    ?.  (is-host:core ship.path)
      ::
      ::  MEMBER
      ::  If we are invited we will send the invite action to the host
      =.  incoming.invitations.state    (~(del by incoming.invitations.state) path)
      :_  state
      :~  [%pass /passports %agent [ship.path %passports] %poke visa-action+!>(act)]
          [%give %fact [/all ~] visa-reaction+!>([%invite-removed path])]  
      ==
    ::
    ::  HOST
    ::
    =/  decliner                    src.bowl
    =/  membs                       (~(got by membership.state) path)
    =.  membs                       (~(del by membs) decliner)
    =.  membership.state            (~(put by membership.state) [path membs])
    =/  space-invites               (~(got by outgoing.invitations.state) path)
    =.  space-invites               (~(del by space-invites) decliner)
    =.  outgoing.invitations.state  (~(put by outgoing.invitations.state) [path space-invites])
    :_  state
    :~  [%give %fact [/all ~] visa-reaction+!>([%kicked path decliner])]
    ==
  ::
  ++  handle-stamped    :: MEMBER
    |=  [path=space-path:spaces]
    ^-  (quip card _state)
    =.  incoming.invitations.state  (~(del by incoming.invitations.state) path)
    =/  watch-path                  [/members/(scot %p ship.path)/(scot %tas space.path)]
    :_  state
    ::  watch the spaces and passports path once invite flow is complete
    :~
      [%pass watch-path %agent [ship.path %passports] %watch watch-path]
      [%pass / %agent [our.bowl %spaces] %poke spaces-action+!>([%join path src.bowl])]
      [%give %fact [/all ~] visa-reaction+!>([%invite-removed path])]                   ::  we want to remove the invite after accepted
    ==
  ::
  ++  handle-kicked     ::  MEMBER | HOST
    |=  [path=space-path:spaces =ship]
    ^-  (quip card _state)
    ?>  (has-auth:core path src.bowl %admin)
    ?.  (is-host:core ship.path)
      ::
      ::  MEMBER
      ::
      ::  If we are kicking someone else we will send the invite action to the host
      :_  state
      [%pass /passports %agent [ship.path dap.bowl] %poke visa-action+!>(act)]~
    ::
    ::  HOST
    ::
    =/  membs                   (~(got by membership.state) path)
    =.  membs                   (~(del by membs) ship)
    =.  membership.state        (~(put by membership.state) [path membs])
    =/  watch-path              /members/(scot %p ship.path)/(scot %tas space.path)
    :_  state
    :~  [%give %fact [watch-path /all ~] visa-reaction+!>([%kicked path ship])]
        ::  kick from all core agents
        [%give %kick ~[/bazaar/(scot %p ship.path)/(scot %tas space.path)] (some ship)]
        [%give %kick ~[/members/(scot %p ship.path)/(scot %tas space.path)] (some ship)]
        [%pass /spaces %agent [ship %spaces] %poke spaces-action+!>([%kicked path ship])]
    ==
  ::
  --
++  passports-reaction
  |=  [rct=reaction:store]
  ^-  (quip card _state)
  |^
  ?+  -.rct         `state
    %all            (on-all +.rct)
    %members        (on-members +.rct)
  ==
  ::
  ++  on-all
    |=  [=districts:store]
    ^-  (quip card _state)
    `state
  ::
  ++  on-members  ::  fires off after we successfully connect to remote
    |=  [path=space-path:spaces =passports:store]
    ^-  (quip card _state)
    =.  membership.state      (~(put by membership.state) [path passports])
    ~&  >  ['passport reaction should on-members' passports]
    :_  state
    [%give %fact [/all ~] passports-reaction+!>([%new-members path passports])]~
    :: (members:send-reaction [%members path passports] [/all ~])
    :: `state
  ::
  --
::
++  visa-reaction
  |=  [rct=reaction:visas]
  ^-  (quip card _state)
  |^
  ?-  -.rct
    %invite-sent        (on-sent +.rct)
    %invite-received    `state
    %invite-removed     `state
    %invite-accepted    (on-accepted +.rct)
    %kicked             (on-kicked +.rct)
  ==
  ::
  ++  on-sent
    |=  [path=space-path:spaces =ship =invite:visas =passport:store]
    ^-  (quip card _state)
    =/  passes                      (~(gut by membership.state) path `passports:store`[~])
    =.  passes                      (~(put by passes) [ship [roles=(silt `(list role:membership-store)`~[role.invite]) alias='' status=%invited]])
    =.  membership.state            (~(put by membership.state) [path passes])
    `state
  ::
  ++  on-accepted
    |=  [path=space-path:spaces =ship =passport:store]
    ^-  (quip card _state)
    =/  passes                      (~(gut by membership.state) path `passports:store`[~])
    =.  passes                      (~(put by passes) [ship passport])
    =.  membership.state            (~(put by membership.state) [path passes])
    `state
  ::
  ++  on-kicked
    |=  [path=space-path:spaces =ship]
    ^-  (quip card _state)
    ?:  =(our.bowl ship.path)
      =.  incoming.invitations.state  (~(del by incoming.invitations.state) path)
      :_  state
      [%pass /members/(scot %p ship.path)/(scot %tas space.path) %agent [ship.path %passports] %leave ~]~
    ::  someone else was kicked
    `state
  ::
  --
::
++  set-outgoing
  |=  [path=space-path:spaces =ship inv=invite:visas]
  =/  space-invites               (~(gut by outgoing.invitations.state) path `space-invitations:visas`[~])
  =.  space-invites               (~(put by space-invites) [ship inv])
  (~(put by outgoing.invitations.state) [path space-invites])
::
++  on-spaces-initial
  |=  [rct=reaction:spaces]
  ^-  (quip card _state)
  ?>  ?=(%initial -.rct)
  `state
::
++  on-spaces-add
  |=  [rct=reaction:spaces]
  ^-  (quip card _state)
  ?>  ?=(%add -.rct)
  =/  passports=(map ship passport:store)  (to-passports members.rct)
  =.  membership.state      (~(put by membership) path.space.rct passports)
  :_  state
  %+  weld  (make-visas path.space.rct members.rct space.rct)
  (members:send-reaction [%members path.space.rct passports] [/members/(scot %p ship.path.space.rct)/(scot %tas space.path.space.rct) ~])
::
++  to-passports
  |=  =members:membership-store
  ^-  passports:store
  %-  ~(rep by members)
  |=  [[=ship =member:membership-store] passports=(map ship passport:store)]
  =|  passport=passport:store
  =.  alias.passport  ''
  =.  roles.passport    roles.member
  =.  status.passport   status.member
  (~(put by passports) ship passport)
::
++  on-spaces-replace
  |=  [rct=reaction:spaces]
  ^-  (quip card _state)
  ?>  ?=(%replace -.rct)
  `state
::
++  on-spaces-remove
  |=  [rct=reaction:spaces]
  ^-  (quip card _state)
  ?>  ?=(%remove -.rct)
  ~&  'on-space-remove passports'
  ?:  =(ship.path.rct our.bowl)      ::  we are the host, so lets kick everyone
    =/  members               (~(got by membership.state) path.rct)   ::  get members to kick
    =.  members               (~(del by members) our.bowl)            ::  delete us from the list so we don't kick ourselves
    =.  membership.state      (~(del by membership.state) path.rct)   ::  delete the space members map
    =/  watch-path            [/members/(scot %p ship.path.rct)/(scot %tas space.path.rct) ~]
    :_  state
    %-  ~(rep by members)
      |=  [[=ship =passport:store] acc=(list card)]
      %+  snoc  acc
      [%give %kick watch-path (some ship)]
  ::
  =/  has-incoming                    (~(get by incoming.invitations.state) path.rct)
  ?~  has-incoming                    ::  we dont have an invitation, so we are a member, simply remove
    `state(membership (~(del by membership) path.rct))
  ::  we 
  =.  incoming.invitations.state      (~(del by incoming.invitations.state) path.rct)
  :_  state
  [%give %fact [/all ~] visa-reaction+!>([%invite-removed path.rct])]~
::
++  on-spaces-new
  |=  [rct=reaction:spaces]
  ^-  (quip card _state)
  ?>  ?=(%new-space -.rct)
  `state
::
++  send-reaction
  |%
  ++  friends
    |=  [rct=reaction:store paths=(list path)]
    ^-  (list card)
    [%give %fact paths passports-reaction+!>(rct)]~
  ::
  ++  members
    |=  [rct=reaction:store paths=(list path)]
    ^-  (list card)
    [%give %fact paths passports-reaction+!>(rct)]~
  --
::
++  check-member
  |=  [path=space-path:spaces =ship]
  ^-  ?
  =/  passports   (~(get by membership.state) path)
  ?~  passports
    %.n
  (~(has by (need passports)) ship)
::
++  is-host
  |=  [=ship]
  =(our.bowl ship)
::
++  has-auth
  |=  [=space-path:spaces =ship =role:membership-store]
  =/  member        (~(got by (~(got by membership.state) space-path)) ship)
  (~(has in roles.member) role)
::
++  notify
  |=  [pth=space-path:spaces slug=path msg=cord]
  ^-  action:hark
  :+  %add-note  `bin:hark`[/ [%realm /spaces/(scot %p ship.pth)]]
  :*  [ship/ship.pth text/msg ~]
      ~
      now.bowl
      /
      %-  weld
      :-  /spaces/(scot %p ship.pth)/(scot %tas space.pth)
      slug
  ==
--