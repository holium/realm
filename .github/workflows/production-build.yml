name: production-build
run-name: Production Build - ${{ github.actor }}
on:
  pull_request:
    types:
      - closed
    branches:
      - main
jobs:
  build-mac-production:
    if: github.event.pull_request.merged == true
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Install yarn
        run: npm install -g yarn
      - name: Install app dependencies
        run: yarn install
      - name: Build and publish
        run: npx cross-env APPLE_ID=$APPLE_ID APPLE_ID_PASS=$APPLE_ID_PASS PUBLISH_FOR_PULL_REQUEST=true CSC_FOR_PULL_REQUEST=true CSC_LINK=$BUILD_CERTIFICATE_BASE64 CSC_KEY_PASSWORD=$P12_PASSWORD GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn package:release:mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #
  # build-linux-production:
  #   if: github.event.pull_request.merged == true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
  #     - name: Install yarn
  #       run: npm install -g yarn
  #     - name: Install app dependencies
  #       run: yarn install
  #     - name: Build and publish
  #       run: |
  #         sudo dpkg --add-architecture i386
  #         sudo mkdir -pm755 /etc/apt/keyrings
  #         sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
  #         sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
  #         sudo apt update
  #         sudo apt install aptitude
  #         sudo aptitude install -y -q winehq-staging
  #         sudo aptitude install -y -q wine-staging
  #         sudo apt update
  #         GH_TOKEN=$GH_TOKEN DEBUG_PROD=true npx yarn package:release:linux
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
  # #
  # build-windows-production:
  #   if: github.event.pull_request.merged == true
  #   runs-on: ubuntu-latest
  #   container:
  #     image: electronuserland/builder:wine
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     #
  #     - name: Build and install
  #       run: |
  #         apt-get update && apt-get -y install sudo
  #         GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn && sudo GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn package:release:win
  #       env:
  #         USERNAME: ${{ github.actor }}
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
  #
  bump-app-version:
    needs: [build-mac-production]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
      - name: Increment version
        run: |
          cd ./app/release/app
          git config --global user.email realm-builder-no-reply@holium.com
          git config --global user.name ${{ github.actor }}
          git pull
          npm version patch
          git add package.json
          git commit -m "patch version"
          git push
      # Workaround to avoid "Post Run actions/setup-node" failures.
      # See: https://codesti.com/issue/actions/setup-node/317
      - run: mkdir -p /home/runner/.npm
        continue-on-error: true
  #
  deploy-desks:
    needs: [bump-app-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
      - name: Bump desks version
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/workflows/scripts/bump.js')
            console.log(script({github}, './app/release/app/package.json', ['./desks/realm']))
      #
      - name: Push desk version update
        run: |
          git config --global user.email realm-builder-no-reply@holium.com
          git config --global user.name ${{ github.actor }}
          git pull
          git add ./desks/realm/desk.docket-0
          git commit -m "patch realm desk version"
          git push
      #
      - name: Publish ship updates
        run: |
          mkdir ~/.ssh
          echo "$DEPLOY_RSA" >> ~/.ssh/usher_rsa
          chmod 600 ~/.ssh/usher_rsa
          scp -v -i ~/.ssh/usher_rsa -o StrictHostKeyChecking=no -r ./desks/realm $DEPLOY_USERNAME@$DEPLOY_HOST:./urbit/hostyv/realm-staging
          scp -v -i ~/.ssh/usher_rsa -o StrictHostKeyChecking=no -r ./desks/courier $DEPLOY_USERNAME@$DEPLOY_HOST:./urbit/hostyv/courier-staging
          scp -v -i ~/.ssh/usher_rsa -o StrictHostKeyChecking=no -r ./desks/usher $DEPLOY_USERNAME@$DEPLOY_HOST:./urbit/hostyv/usher
        env:
          DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_RSA: ${{ secrets.DEPLOY_RSA }}
      #
      # poke remote endpoint in usher agent which will run clay commit
      #  see dirk: https://developers.urbit.org/reference/arvo/clay/examples#dirk
      #  for more information
      - name: Deploy ship updates
        uses: actions/github-script@v6
        env:
          DEPLOY_SHIP: ${{ secrets.DEPLOY_SHIP }}
          DEPLOY_SHIP_CODE: ${{ secrets.DEPLOY_SHIP_CODE }}
          DEPLOY_ROOT_URL: ${{ secrets.DEPLOY_ROOT_URL }}
        with:
          script: |
            const script = require('./.github/workflows/scripts/deploy.js')
            console.log(script({github}, {
              ship: process.env.DEPLOY_SHIP,
              code: process.env.DEPLOY_SHIP_CODE,
              rootUrl: process.env.DEPLOY_ROOT_URL,
              mounts: ['usher', 'realm-staging', 'courier-staging']
            }))
      # Workaround to avoid "Post Run actions/setup-node" failures.
      # See: https://codesti.com/issue/actions/setup-node/317
      - run: mkdir -p /home/runner/.npm
        continue-on-error: true
