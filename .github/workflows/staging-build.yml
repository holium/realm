# name: staging-build
# run-name: Staging Build - ${{ github.actor }}
# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - staging
# jobs:
#   # build-mac-staging:
#   #   runs-on: macos-latest
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3
#   #     - name: Setup node
#   #       uses: actions/setup-node@v3
#   #       with:
#   #         node-version: "14"
#   #         cache: "npm"
#   #     - name: Install the Apple certificate
#   #       env:
#   #         BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
#   #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#   #         # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#   #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#   #       run: |
#   #         # create variables
#   #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#   #         # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#   #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#   #         # import certificate and provisioning profile from secrets
#   #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#   #         # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

#   #         # create temporary keychain
#   #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#   #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#   #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#   #         # import certificate to keychain
#   #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#   #         security list-keychain -d user -s $KEYCHAIN_PATH

#   #         # apply provisioning profile
#   #         # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#   #         # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#   #     - name: Install yarn
#   #       run: npm install -g yarn
#   #     - name: Install app dependencies
#   #       run: yarn install
#   #     # in this branch, set DEBUG_PROD=true to ensure invite code, developer tools,
#   #     #   and other utilities/functionality are available in the final product
#   #     - name: Build and publish
#   #       run: npx cross-env APPLE_ID=$APPLE_ID APPLE_ID_PASS=$APPLE_ID_PASS CSC_LINK=$BUILD_CERTIFICATE_BASE64 CSC_KEY_PASSWORD=$P12_PASSWORD GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn package:prerelease
#   #       env:
#   #         APPLE_ID: ${{ secrets.APPLE_ID }}
#   #         APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
#   #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
#   #         BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
#   #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#   #     - name: Increment version
#   #       uses: actions/github-script@v6
#   #       with:
#   #         script: |
#   #           const script = require('./.github/workflows/scripts/verinc.js')
#   #           console.log(script({github, context}))
#   #
#   build-windows-staging:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Setup node
#         uses: actions/setup-node@v3
#         with:
#           node-version: "14"
#           cache: "npm"
#       # - name: Install Windows certificates
#       #   env:
#       #     BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
#       #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#       #     # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#       #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#       #   run: |
#       #     # create variables
#       #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#       #     # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#       #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#       #     # import certificate and provisioning profile from secrets
#       #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#       #     # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

#       #     # create temporary keychain
#       #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#       #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#       #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#       #     # import certificate to keychain
#       #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#       #     security list-keychain -d user -s $KEYCHAIN_PATH

#       #     # apply provisioning profile
#       #     # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#       #     # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#       - name: Install yarn
#         run: npm install -g yarn
#       - name: Install app dependencies
#         run: yarn install
#       # in this branch, set DEBUG_PROD=true to ensure invite code, developer tools,
#       #   and other utilities/functionality are available in the final product
#       # sudo apt install --install-recommends wine-stable
#       #       sudo dpkg --add-architecture i386
#       # sudo mkdir -pm755 /etc/apt/keyrings
#       # sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
#       # sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
#       # sudo apt update
#       # sudo apt install aptitude
#       # sudo aptitude install -y -q wine-staging
#       # sudo apt-get install --no-install-recommends -y gcc-multilib g++-multilib
#       - name: Build and publish
#         run: |
#           sudo dpkg --add-architecture i386
#           sudo mkdir -pm755 /etc/apt/keyrings
#           sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
#           sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
#           sudo apt update
#           sudo apt install aptitude
#           sudo aptitude install -y -q winehq-staging
#           sudo aptitude install -y -q wine-staging
#           sudo apt update
#           GH_TOKEN=$GH_TOKEN DEBUG_PROD=true npx yarn package:prerelease
#         env:
#           #   APPLE_ID: ${{ secrets.APPLE_ID }}
#           #   APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
#           GH_TOKEN: ${{ secrets.GH_TOKEN }}
#         #   BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
#         #   P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#   #
#   # build-linux-staging:
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3
#   #     - name: Setup node
#   #       uses: actions/setup-node@v3
#   #       with:
#   #         node-version: "14"
#   #         cache: "npm"
#   #     - name: Install yarn
#   #       run: npm install -g yarn
#   #     - name: Install app dependencies
#   #       run: yarn install
#   #     # in this branch, set DEBUG_PROD=true to ensure invite code, developer tools,
#   #     #   and other utilities/functionality are available in the final product
#   #     - name: Build and publish
#   #       run: npx cross-env GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn package:prerelease
#   #       env:
#   #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
#   #     - name: Increment version
#   #       run: |
#   #         cd ./app/release/app
#   #         npm version patch
#   #         git config --global user.email realm-builder-no-reply@holium.com
#   #         git config --global user.name ${{ github.actor }}
#   #         git add package.json
#   #         git commit -m "patch version"
#   #         git push

name: Staging build
on:
  workflow_dispatch:
  push:
    branches:
      - staging
jobs:
  node-docker:
    runs-on: ubuntu-latest
    container:
      image: electronuserland/builder:wine
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: "npm"
      - name: Build and install
        run: |
          # sudo chown -R $USER: ~/.wine
          GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn && yarn package:prerelease
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
