name: staging-build
run-name: Staging Build - ${{ github.actor }}
on:
  # push:
  #   branches:
  #     - master
  pull_request:
    types:
      - closed
    branches:
      - master
jobs:
  # 1) tag the master branch with the title of the PR
  # 2) create a new release (in draft mode) so that we have somewhere to store assets
  # 3) see deploy-release job which ensures that once all other workflows, jobs, actions have
  #    completed successfully that we turn this into published release
  start-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize build environment
        uses: actions/github-script@v6
        id: ci
        with:
          script: |
            const script = require('./.github/workflows/scripts/init.js')
            const result = script({github, context}, './app/release/app/package.json')
            console.log(result)
            return result
      # commit the change for the new version
      - name: Push package version update
        run: |
          git config --global user.email realm-builder-no-reply@holium.com
          git config --global user.name ${{ github.actor }}
          git stash
          git pull origin master
          git stash pop
          git add ./app/release/app/package.json
          git commit -m "patch realm app version"
          git push
      #
      - name: Start release draft
        # create annotated tag for this branch. this will become basis for the release
        run: |
          mkdir -p ./app/release/build
          touch ./app/release/build/log.txt
          echo "start-release workflow for ${{steps.ci.outputs.result.buildVersion}}..." >> ./app/release/build/log.txt
          git config --global user.email realm-builder-no-reply@holium.com
          git config --global user.name ${{ github.actor }}
          git tag -a ${{steps.ci.outputs.result.buildVersion}} -m "build tag: ${{steps.ci.outputs.result.buildVersion}}"
          git push origin ${{steps.ci.outputs.result.buildVersion}}
          gh release create ${{steps.ci.outputs.result.buildVersion}} ./app/release/build/*.* --draft --target ${{ github.ref_name }} --latest=false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #
  # build-windows-staging:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: electronuserland/builder:wine
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     #
  #     - name: Build and install
  #       run: |
  #         apt-get update && apt-get -y install sudo
  #         GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn && sudo GH_TOKEN=$GH_TOKEN DEBUG_PROD=true yarn package:prerelease:win
  #       env:
  #         USERNAME: ${{ github.actor }}
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
  #
  build-mac-staging:
    if: github.event.pull_request.merged == true
    needs: [start-release]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Install yarn
        run: npm install -g yarn
      - name: Install app dependencies
        run: yarn install
      - name: Build and publish
        run: npx cross-env APPLE_ID=$APPLE_ID APPLE_ID_PASS=$APPLE_ID_PASS PUBLISH_FOR_PULL_REQUEST=true CSC_FOR_PULL_REQUEST=true CSC_LINK=$BUILD_CERTIFICATE_BASE64 CSC_KEY_PASSWORD=$P12_PASSWORD GH_TOKEN=$GH_TOKEN yarn package:prerelease:mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.REALM_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #
      - name: Deploy binaries and other artifacts to draft release
        run: |
          gh release upload ${{steps.ci.outputs.result.buildVersion}} ./app/release/build/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  # #
  # deploy-desks:
  #   needs: [build-mac-staging]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GH_TOKEN }}
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
  #     - name: Bump desks version
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const script = require('./.github/workflows/scripts/bump.js')
  #           console.log(script({github}, './app/release/app/package.json', ['./desks/realm']))
  #     #
  #     - name: Push desk version update
  #       run: |
  #         git config --global user.email realm-builder-no-reply@holium.com
  #         git config --global user.name ${{ github.actor }}
  #         git stash
  #         git pull origin main
  #         git stash pop
  #         git add ./desks/realm/desk.docket-0
  #         git commit -m "patch realm desk version"
  #         git push
  #     #
  #     # publish latest agent udpates for realm, courier, and usher
  #     - name: Publish ship updates
  #       run: |
  #         mkdir ~/.ssh
  #         echo "$DEPLOY_RSA_STAGING" >> ~/.ssh/usher_rsa
  #         chmod 600 ~/.ssh/usher_rsa
  #         scp -v -i ~/.ssh/usher_rsa -r ./desks/realm $DEPLOY_USERNAME@$DEPLOY_HOST:./nimwyd-ramwyl-dozzod-hostyv
  #         scp -v -i ~/.ssh/usher_rsa -r ./desks/courier $DEPLOY_USERNAME@$DEPLOY_HOST:./nimwyd-ramwyl-dozzod-hostyv
  #         scp -v -i ~/.ssh/usher_rsa -r ./desks/usher $DEPLOY_USERNAME@$DEPLOY_HOST:./nimwyd-ramwyl-dozzod-hostyv
  #       env:
  #         DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME_STAGING }}
  #         DEPLOY_HOST: ${{ secrets.DEPLOY_HOST_STAGING }}
  #         DEPLOY_RSA: ${{ secrets.DEPLOY_RSA_STAGING }}
  #     #
  #     # poke remote endpoint in usher agent which will run clay commit
  #     #  see dirk: https://developers.urbit.org/reference/arvo/clay/examples#dirk
  #     #  for more information
  #     - name: Deploy ship updates
  #       uses: actions/github-script@v6
  #       env:
  #         DEPLOY_SHIP: ${{ secrets.DEPLOY_SHIP_STAGING }}
  #         DEPLOY_SHIP_CODE: ${{ secrets.DEPLOY_SHIP_CODE_STAGING }}
  #         DEPLOY_ROOT_URL: ${{ secrets.DEPLOY_ROOT_URL_STAGING }}
  #       with:
  #         script: |
  #           const script = require('./.github/workflows/scripts/deploy.js')
  #           console.log(script({github}, {
  #             ship: process.env.DEPLOY_SHIP_STAGING,
  #             code: process.env.DEPLOY_SHIP_CODE_STAGING,
  #             rootUrl: process.env.DEPLOY_ROOT_URL_STAGING,
  #             mounts: ['usher', 'realm', 'courier']
  #           }))
  #     # Workaround to avoid "Post Run actions/setup-node" failures.
  #     # See: https://codesti.com/issue/actions/setup-node/317
  #     - run: mkdir -p /home/runner/.npm
  #       continue-on-error: true
  #
  # bump-app-version:
  #   needs: [deploy-desks]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GH_TOKEN }}
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
  #     - name: Increment version
  #       run: |
  #         cd ./app/release/app
  #         git config --global user.email realm-builder-no-reply@holium.com
  #         git config --global user.name ${{ github.actor }}
  #         git pull
  #         npm version patch
  #         git add package.json
  #         git commit -m "patch version"
  #         git push
  #     # Workaround to avoid "Post Run actions/setup-node" failures.
  #     # See: https://codesti.com/issue/actions/setup-node/317
  #     - run: mkdir -p /home/runner/.npm
  #       continue-on-error: true
  #
  #  once everything is done, flip the switch on the draft release to make
  #    the release available to auto-update
  deploy-release:
    needs: [build-mac-staging]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - run: |
          gh release edit ${{steps.ci.outputs.result.buildVersion}} --prerelease=true --draft=false --latest=false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
